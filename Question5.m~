function cout = Question5(donnees)
d = importdata(donnees);
c = [d.cout_materiaux  d.cout_stockage  d.cout_materiaux+(d.cout_heure_sup*(d.duree_assemblage/60))  d.cout_sous_traitant  d.cout_retard];
NBRE_VAR = 5;
LengthC = NBRE_VAR*d.T;
C=c;
for i = 1:d.T-1
C = [C c];
end

%%% -/ Matrice des contraintes d'égalité Ax=b \- %%%

Aequal = sparse(d.T+2,d.T*NBRE_VAR);
bequal = zeros(1,d.T+2);

Aequal(1,1:5) = [1 -1 1 1 1]; 
bequal(1) = d.demande(1)-d.stock_initial;
for i = 2:d.T
    Aequal(i,(1+NBRE_VAR*(i-1)):(NBRE_VAR*(i-1)+5)) = [1 -1 1 1 1];
    Aequal(i,NBRE_VAR*(i-1)) = -1;
    Aequal(i,(NBRE_VAR*(i-1))-3) = 1;
    bequal(i) = d.demande(i);
end
Aequal(d.T+1,d.T*NBRE_VAR-3)=1;
bequal(d.T+1) = d.stock_initial;
Aequal(d.T+2,d.T*NBRE_VAR)=1;
bequal(d.T+2) = 0;


%%% -/ Matrice des contraintes d'inégalité Ax<=b \- %%%

Aineq = sparse(5*d.T, d.T*NBRE_VAR);
bineq = zeros(1,5*d.T);

for i = 2:d.T
    Aineq(i, ((NBRE_VAR*(i-1)+1)):((NBRE_VAR*(i-1)+5))) = [-1 0 -1 -1 0]; 
    Aineq(i, (NBRE_VAR*i)) = 1;
    bineq(1,i) = 0;
end
Aineq(1, NBRE_VAR-1) = 1;
Aineq(1, NBRE_VAR-3) = 0;
Aineq(1, NBRE_VAR) = 0;

%Les Upper Bounds sont maintenant contenues dans la matrice d'inégalité
for i = d.T+1:2*d.T
    Aineq(i, (NBRE_VAR*(i-d.T-1)+1)) = 1;
    bineq(1,i) = (d.nb_ouvriers*35)/(d.duree_assemblage/60);
end
for i = 2*d.T+1:3*d.T
    Aineq(i, (NBRE_VAR*(i-2*d.T-1)+3)) = 1;
    bineq(1,i) = (d.nb_ouvriers*d.nb_max_heure_sup)/(d.duree_assemblage/60);
end
for i = 3*d.T+1:4*d.T
    Aineq(i, (NBRE_VAR*(i-3*d.T-1)+4)) = 1;
    bineq(1,i) = d.nb_max_sous_traitant;
end
for i = 4*d.T+1:5*d.T
    Aineq(i, (NBRE_VAR*(i-4*d.T-1)+5)) = 1;
    bineq(1,i) = d.demande(i-4*d.T);
end

% transformations de la matrice égalité en 2 matrices inégalités
A = [Aineq;Aequal;-Aequal]; 
[m, n] = size(A);
Ad=sparse(m+n,m);
Ad(1:n,:)=A';

B = [bineq bequal -bequal];
size(Ad)

%Inversion de C et B
Fd= -B'; 
Bd(1:n) = C';

%LowerBound 
Ad(n+1:m+n,:)=eye(m);
Bd=zeros(1,m+n);


lb_dual= zeros(1,m+n);

options = optimoptions(@linprog, 'Algorithm', 'simplex');

[y,f] = linprog(Fd, Ad, Bd, [], [], [], [],[],options); %Calcul du DUAL

%Calcul de la solution avec différents epsilons
Bchange=Fd;
a=1;
for epsilon = 0:0.1:1
    Bchange(4*d.T+1:5*d.T) = -(d.demande+(d.delta_demande*epsilon));
    Bchange(5*d.T+1:6*d.T) = -(d.demande+(d.delta_demande*epsilon));
    Bchange(6*d.T+3:7*d.T+2) = d.demande+(d.delta_demande*epsilon);
    Bchange(5*d.T+1) = -(d.demande(1)+(d.delta_demande(1)*epsilon)-d.stock_initial);
    Bchange(6*d.T+3) = d.demande(1)+(d.delta_demande(1)*epsilon)-d.stock_initial;
    cout(a,1)= -y'*Bchange + (d.cout_horaire*d.nb_ouvriers*35*d.T);
    a=a+1;
end
